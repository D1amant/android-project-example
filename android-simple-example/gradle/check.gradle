class CheckExtension {
    boolean checkstyleAbortOnError = true
    boolean findbugsAbortOnError = true
    boolean pmdAbortOnError = true
}

/* *** *** *** *** *** *** */
/* ***     Common      *** */
/* *** *** *** *** *** *** */

project.extensions.add("checkConfig", new CheckExtension())
List<File> androidSources = android.sourceSets.inject([]) { dirs, sourceSet -> dirs + sourceSet.java.srcDirs }

/* *** *** *** *** *** *** */
/* ***   CheckStyle    *** */
/* *** *** *** *** *** *** */

apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    ignoreFailures = true
    configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
    source android.sourceSets.inject([]) { dirs, sourceSet -> dirs + sourceSet.java.srcDirs }
    classpath = files()
    reports { xml { destination "$project.buildDir/outputs/checkstyle/checkstyle.xml" } }
}
check.dependsOn 'checkstyle'
tasks.getByName('checkstyle') << {
    CheckExtension checkExtension = project.extensions.getByType(CheckExtension)

    File xslTemplate = rootProject.file('gradle/config/checkstyle/checkstyle-noframes-sorted.xsl')
    File xmlReport = tasks.getByName('checkstyle').reports.xml.destination
    File htmlReport = xmlReport.absolutePath.replaceFirst(~/\.[^\.]+$/, '.html') as File
    ant.xslt(in: xmlReport, style: xslTemplate, out: htmlReport)

    def xml = new XmlSlurper().parseText(xmlReport.text)
    int count = xml.file.inject(0) { count, file -> count + file.error.size() }
    String message = "$count Checkstyle rule violations were found. See the report at: ${htmlReport.toURI()}"
    if (count) {
        if (checkExtension.checkstyleAbortOnError) {
            throw new GradleException(message)
        } else {
            logger.warn message
        }
    }
}

/* *** *** *** *** *** *** */
/* ***    FindBugs     *** */
/* *** *** *** *** *** *** */

apply plugin: 'findbugs'
task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = rootProject.file('gradle/config/findbugs/exclude.xml')

    classes = files("$project.buildDir/intermediates/classes")
    classpath = files()

    source androidSources

    reports {
        xml {
            destination "$project.buildDir/outputs/findbugs/findbugs.xml"
            xml.withMessages true
        }
    }
}
check.dependsOn 'findbugs'
tasks.getByName('findbugs') << {
    CheckExtension checkExtension = project.extensions.getByType(CheckExtension)

    File xslTemplate = rootProject.file('gradle/config/findbugs/fancy.xsl')
    File xmlReport = tasks.getByName('findbugs').reports.xml.destination
    File htmlReport = xmlReport.absolutePath.replaceFirst(~/\.[^\.]+$/, '.html') as File
    ant.xslt(in: xmlReport, style: xslTemplate, out: htmlReport)

    def xml = new XmlSlurper().parseText(xmlReport.text)
    int count = xml.BugInstance.size()
    String message = "$count FindBugs rule violations were found. See the report at: ${htmlReport.toURI()}"
    if (count) {
        if (checkExtension.findbugsAbortOnError) {
            throw new GradleException(message)
        } else {
            logger.warn message
        }
    }
}

/* *** *** *** *** *** *** */
/* ***       PMD       *** */
/* *** *** *** *** *** *** */

apply plugin: 'pmd'
task pmd(type: Pmd) {
    ruleSetFiles = files(rootProject.file('gradle/config/pmd/ruleset.xml'))
    source androidSources
    reports {
        xml { destination "$project.buildDir/outputs/pmd/pmd.xml" }
        html { destination "$project.buildDir/outputs/pmd/pmd.html" }
    }
}
check.dependsOn 'pmd'
gradle.taskGraph.whenReady {
    CheckExtension checkExtension = project.extensions.getByType(CheckExtension)
    tasks.getByName('pmd').ignoreFailures = !checkExtension.pmdAbortOnError
}
